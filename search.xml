<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自注意力</title>
      <link href="/2021/10/14/test-my-site/"/>
      <url>/2021/10/14/test-my-site/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们前面说过，注意力机制包含几个重要的参数，query，key，value，针对不同的问题，往往需要选择合适的变量来作为query，key,和value，当遇到query,key,value都是同一个东西，同一种参数的时候，这样的机制叫做自注意力机制。</p><h2 id="1-自注意力"><a href="#1-自注意力" class="headerlink" title="1. 自注意力"></a>1. 自注意力</h2><p>假设我们有一个输入序列，$\mathbf{x}<em>{1}, \ldots, \mathbf{x}</em>{n}, \forall \mathbf{x}<em>{i} \in \mathbb{R}^{d}$，xi是第i个时间步的输入，d是输入值的特征维度，自注意力池化层将xi同时作为query,key,value，对序列抽取特征得到$\mathbf{y}</em>{1}, \ldots, \mathbf{y}<em>{n}$,其中  $\mathbf{y}</em>{i}=f\left(\mathbf{x}<em>{i},\left(\mathbf{x}</em>{1}, \mathbf{x}<em>{1}\right), \ldots,\left(\mathbf{x}</em>{n}, \mathbf{x}_{n}\right)\right) \in \mathbb{R}^{d}$​​​​，xi作为query，key-value对包含了所有的xi对，对应序列中的每一个元素xi都会输出一个yi。</p><p><a href="https://imgtu.com/i/f4TBZ9"><img src="https://z3.ax1x.com/2021/08/17/f4TBZ9.png" alt="f4TBZ9.png"></a></p><h2 id="2-与CNN-RNN对比"><a href="#2-与CNN-RNN对比" class="headerlink" title="2. 与CNN,RNN对比"></a>2. 与CNN,RNN对比</h2><p><a href="https://imgtu.com/i/f4q77Q"><img src="https://z3.ax1x.com/2021/08/17/f4q77Q.png" alt="f4q77Q.png"></a></p><p>对于CNN，k就是指卷积核的大小，n是输入数据量，d是指数据维度，并行度就是说每个输出之间可以各自独立运算出结果，第一个输出的结果不取决于上一个输出，这样的话就很方便进行并行的计算，大家可以同时计算，这样的计算效率就比较高。<br><a href="https://imgtu.com/i/f4OIoQ"><img src="https://z3.ax1x.com/2021/08/17/f4OIoQ.png" alt="f4OIoQ.png"></a></p><p>最长路径我理解的是输入信息在前向计算和反向传播过程中影响到另一个输入所需要走过的最长路径。</p><p><a href="https://imgtu.com/i/f4quYn"><img src="https://z3.ax1x.com/2021/08/17/f4quYn.png" alt="f4quYn.png"></a></p><p>自注意力的计算复杂度比较高，尤其是输入序列较长的时候，根据之前计算yi的公式，我们需要把序列中的每个元素都进行计算，这带来了比较大的计算负担。但是最大路径很短，这在网路示意图中可以很明显的看到，当序列很长的时候可以很快获取到距离比较远的信息。且相较于RNN多级传递可以有较少的信息损失。</p><p>我们都知道RNN适合处理序列但处理长序列就会有长程依赖的问题，为了解决这个问题提出了LSTM，但LSTM正如它的名字长短时记忆网络，终究只是比较长的短时记忆网络，原有局限性有改善但是依旧存在，因此结合自注意力池化可以做得更好，付出的代价就是高昂的计算成本。</p><h2 id="3-位置编码"><a href="#3-位置编码" class="headerlink" title="3. 位置编码"></a>3. 位置编码</h2><p>跟CNN和RNN不同，自注意力并没有记录位置信息。</p><p><a href="https://imgtu.com/i/f5pDXR"><img src="https://z3.ax1x.com/2021/08/17/f5pDXR.png" alt="f5pDXR.png" style="zoom:50%;" /></a></p><p>意思就是当我输入序列顺序打乱，输出的顺序也会打乱，但是对应位置上的输出本身内容并不会发生改变，但是我们知道在处理序列的时候元素的顺序也是信息的一部分，比如在在翻译任务里面语序的不同往往对应不同的输出。</p><p>一个解决办法就是把位置信息添加到输入序列中，让输入数据本身就带有位置信息。</p><h4 id="位置矩阵"><a href="#位置矩阵" class="headerlink" title="位置矩阵"></a>位置矩阵</h4><p>假设长度为n的序列是$\mathbf{X} \in \mathbb{R}^{n \times d}$，那么使用一个位置编码矩阵$\mathbf{P} \in \mathbb{R}^{n \times d}$,​将P加在X上，将X+P作为输入。其中P本身包含了许多关于X元素的位置信息，那么我们的目标就是找到一个合理的算法能够有效的提取X的位置信息并且存储在P里面。</p><p>P的计算公式如下：</p><p>$p_{i, 2 j}=\sin \left(\frac{i}{10000^{2 j / d}}\right), \quad p_{i, 2 j+1}=\cos \left(\frac{i}{10000^{2 j / d}}\right)$</p><p>i代表序列的第几个元素，即所谓的位置，j代表第几个特征维度。奇数列和偶数列不一样。</p><p>这是位置矩阵的图像。</p><p><a href="https://imgtu.com/i/f5PQpD"><img src="https://z3.ax1x.com/2021/08/17/f5PQpD.png" alt="f5PQpD.png"  /></a></p><p>途中的Row(position)对应的是位置矩阵的n，即第几个元素，不同的col列对应不同的特征维度。</p><p>模型需要有一定能力才能够学习到输入数据和位置信息之间的关系，这个位置矩阵存储的是相对位置信息。</p><p>我觉得可以借助信号处理的知识来理解这个位置矩阵，在信号与系统我们可以知道，对于任意一个时序信号我们都可以通过傅里叶变换将一个信号变换到频域，这个信号就会存在许多频域的分量。每一个频率分量在时域上进行叠加就得到一个完整的信号。</p><p>我们可以将输入序列X的每一维特征类比到频域的每一个频率分量即col6,col7都对应一个频率分量，然后不同的位置i或者时间点t即Row（position）就对应输入信号的不同的相位。不同的时间点i之间的差就可以类比相位差。</p><p>我们知道正弦信号具有周期性，所以其实相位差代表的就是相对位置关系，所以我们可以认为位置矩阵存储的是相对位置关系。</p><p><a href="https://imgtu.com/i/f5Abse"><img src="https://z3.ax1x.com/2021/08/17/f5Abse.png" alt="f5Abse.png" style="zoom: 80%;" /></a></p><h4 id="绝对位置信息"><a href="#绝对位置信息" class="headerlink" title="绝对位置信息"></a>绝对位置信息</h4><p>或者可以借助计算机使用的二进制编码来理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0 in binary is 000</span><br><span class="line">1 in binary is 001</span><br><span class="line">2 in binary is 010</span><br><span class="line">3 in binary is 011</span><br><span class="line">4 in binary is 100</span><br><span class="line">5 in binary is 101</span><br><span class="line">6 in binary is 110</span><br><span class="line">7 in binary is 111</span><br></pre></td></tr></table></figure><p>我们也可以将$0~7$这个序列的每个元素都由长度为3的特征表示，低位的特征变化频率就比高位的变化要快。</p><p><a href="https://imgtu.com/i/f5mh3q"><img src="https://z3.ax1x.com/2021/08/17/f5mh3q.png" alt="f5mh3q.png"></a></p><h4 id="相对位置信息"><a href="#相对位置信息" class="headerlink" title="相对位置信息"></a>相对位置信息</h4><p>位置位于$i+\delta$​处的位置编码可由线性投影位置$i$​处的位置编码来表示​</p><p>记$\omega_{j}=1 / 10000^{2 j / d}$，那么</p><p>$\left[\begin{array}{cc}\cos \left(\delta \omega_{j}\right) &amp; \sin \left(\delta \omega_{j}\right) \ -\sin \left(\delta \omega_{j}\right) &amp; \cos \left(\delta \omega_{j}\right)\end{array}\right]\left[\begin{array}{c}p_{i, 2 j} \ p_{i, 2 j+1}\end{array}\right]=\left[\begin{array}{c}p_{i+\delta, 2 j} \ p_{i+\delta, 2 j+1}\end{array}\right]$</p><p>这样就意味着输入序列的两个元素之间的相对位置关系固定的情况下，不管其中一个元素的绝对位置在哪，它们之间的相对位置关系都可以用同一个投影矩阵表示，毕竟这个投影矩阵和绝对位置$i$​没有关系。如果要用一个参数$W$​，表示相对位置关系采用这样的形式就可以不用顾及元素出现在序列的哪一个位置。</p><p>其实也可以用相位差来类比，正弦信号相乘会引起相位变化。</p><p><a href="https://imgtu.com/i/f5Kkct"><img src="https://z3.ax1x.com/2021/08/17/f5Kkct.md.jpg" alt="f5Kkct.md.jpg"></a></p><p>可以看到，在与投影矩阵相乘之后，原来的正弦函数发生了相位偏移。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ul><li>自注意力池化层将$x_i$​当作key,value,query来对序列抽取特征​</li><li>完全并行，最长序列为1(对于任何一个输出都参考了整个序列的信息)，长序列计算成本高</li><li>位置编码在输入中加入位置信息，使得自注意力能够记忆位置信息。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/14/hello-world/"/>
      <url>/2021/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
